
final_proj_dldks.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000eb8  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000044  08001058  08001058  00002058  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800109c  0800109c  00003054  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800109c  0800109c  0000209c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080010a4  080010a4  00003054  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080010a4  080010a4  000020a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080010a8  080010a8  000020a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000054  20000000  080010ac  00003000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000016c  20000054  08001100  00003054  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200001c0  08001100  000031c0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00003054  2**0
                  CONTENTS, READONLY
 12 .debug_info   000023f9  00000000  00000000  00003084  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000a92  00000000  00000000  0000547d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000002d8  00000000  00000000  00005f10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000001e3  00000000  00000000  000061e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00014958  00000000  00000000  000063cb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000524f  00000000  00000000  0001ad23  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00081e27  00000000  00000000  0001ff72  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000a1d99  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000c68  00000000  00000000  000a1ddc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004d  00000000  00000000  000a2a44  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000054 	.word	0x20000054
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08001040 	.word	0x08001040

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000058 	.word	0x20000058
 80001dc:	08001040 	.word	0x08001040

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <ADC_Init>:
#include "stm32f4xx.h"
#include "adc_init.h"

void ADC_Init(void)
{
 8000280:	b480      	push	{r7}
 8000282:	af00      	add	r7, sp, #0
    RCC->APB2ENR |= RCC_APB2ENR_ADC1EN;
 8000284:	4b0e      	ldr	r3, [pc, #56]	@ (80002c0 <ADC_Init+0x40>)
 8000286:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000288:	4a0d      	ldr	r2, [pc, #52]	@ (80002c0 <ADC_Init+0x40>)
 800028a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800028e:	6453      	str	r3, [r2, #68]	@ 0x44
    ADC1->CR1 = 0;
 8000290:	4b0c      	ldr	r3, [pc, #48]	@ (80002c4 <ADC_Init+0x44>)
 8000292:	2200      	movs	r2, #0
 8000294:	605a      	str	r2, [r3, #4]
    ADC1->CR2 = 0;
 8000296:	4b0b      	ldr	r3, [pc, #44]	@ (80002c4 <ADC_Init+0x44>)
 8000298:	2200      	movs	r2, #0
 800029a:	609a      	str	r2, [r3, #8]
    ADC1->SQR1 = 0;
 800029c:	4b09      	ldr	r3, [pc, #36]	@ (80002c4 <ADC_Init+0x44>)
 800029e:	2200      	movs	r2, #0
 80002a0:	62da      	str	r2, [r3, #44]	@ 0x2c
    ADC1->SQR3 = 0; // Channel 0 = PA0
 80002a2:	4b08      	ldr	r3, [pc, #32]	@ (80002c4 <ADC_Init+0x44>)
 80002a4:	2200      	movs	r2, #0
 80002a6:	635a      	str	r2, [r3, #52]	@ 0x34
    ADC1->CR2 |= ADC_CR2_ADON;
 80002a8:	4b06      	ldr	r3, [pc, #24]	@ (80002c4 <ADC_Init+0x44>)
 80002aa:	689b      	ldr	r3, [r3, #8]
 80002ac:	4a05      	ldr	r2, [pc, #20]	@ (80002c4 <ADC_Init+0x44>)
 80002ae:	f043 0301 	orr.w	r3, r3, #1
 80002b2:	6093      	str	r3, [r2, #8]
}
 80002b4:	bf00      	nop
 80002b6:	46bd      	mov	sp, r7
 80002b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop
 80002c0:	40023800 	.word	0x40023800
 80002c4:	40012000 	.word	0x40012000

080002c8 <ADC_Read>:
#include "stm32f4xx.h"
#include "adc_read.h"

uint16_t ADC_Read(void)
{
 80002c8:	b480      	push	{r7}
 80002ca:	af00      	add	r7, sp, #0
    ADC1->CR2 |= ADC_CR2_SWSTART;
 80002cc:	4b0a      	ldr	r3, [pc, #40]	@ (80002f8 <ADC_Read+0x30>)
 80002ce:	689b      	ldr	r3, [r3, #8]
 80002d0:	4a09      	ldr	r2, [pc, #36]	@ (80002f8 <ADC_Read+0x30>)
 80002d2:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80002d6:	6093      	str	r3, [r2, #8]
    while (!(ADC1->SR & ADC_SR_EOC));
 80002d8:	bf00      	nop
 80002da:	4b07      	ldr	r3, [pc, #28]	@ (80002f8 <ADC_Read+0x30>)
 80002dc:	681b      	ldr	r3, [r3, #0]
 80002de:	f003 0302 	and.w	r3, r3, #2
 80002e2:	2b00      	cmp	r3, #0
 80002e4:	d0f9      	beq.n	80002da <ADC_Read+0x12>
    return ADC1->DR;
 80002e6:	4b04      	ldr	r3, [pc, #16]	@ (80002f8 <ADC_Read+0x30>)
 80002e8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80002ea:	b29b      	uxth	r3, r3
}
 80002ec:	4618      	mov	r0, r3
 80002ee:	46bd      	mov	sp, r7
 80002f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002f4:	4770      	bx	lr
 80002f6:	bf00      	nop
 80002f8:	40012000 	.word	0x40012000

080002fc <GPIO_Init>:
#include "stm32f4xx.h"
#include "gpio_init.h"

void GPIO_Init(void)
{
 80002fc:	b480      	push	{r7}
 80002fe:	af00      	add	r7, sp, #0
    RCC->AHB1ENR |= RCC_AHB1ENR_GPIOAEN;
 8000300:	4b16      	ldr	r3, [pc, #88]	@ (800035c <GPIO_Init+0x60>)
 8000302:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000304:	4a15      	ldr	r2, [pc, #84]	@ (800035c <GPIO_Init+0x60>)
 8000306:	f043 0301 	orr.w	r3, r3, #1
 800030a:	6313      	str	r3, [r2, #48]	@ 0x30

    GPIOA->MODER |= (3 << 0); // PA0: Analog
 800030c:	4b14      	ldr	r3, [pc, #80]	@ (8000360 <GPIO_Init+0x64>)
 800030e:	681b      	ldr	r3, [r3, #0]
 8000310:	4a13      	ldr	r2, [pc, #76]	@ (8000360 <GPIO_Init+0x64>)
 8000312:	f043 0303 	orr.w	r3, r3, #3
 8000316:	6013      	str	r3, [r2, #0]
    GPIOA->MODER |= (2 << 2); // PA1: AF
 8000318:	4b11      	ldr	r3, [pc, #68]	@ (8000360 <GPIO_Init+0x64>)
 800031a:	681b      	ldr	r3, [r3, #0]
 800031c:	4a10      	ldr	r2, [pc, #64]	@ (8000360 <GPIO_Init+0x64>)
 800031e:	f043 0308 	orr.w	r3, r3, #8
 8000322:	6013      	str	r3, [r2, #0]
    GPIOA->AFR[0] |= (1 << 4); // PA1 -> AF1 (TIM2)
 8000324:	4b0e      	ldr	r3, [pc, #56]	@ (8000360 <GPIO_Init+0x64>)
 8000326:	6a1b      	ldr	r3, [r3, #32]
 8000328:	4a0d      	ldr	r2, [pc, #52]	@ (8000360 <GPIO_Init+0x64>)
 800032a:	f043 0310 	orr.w	r3, r3, #16
 800032e:	6213      	str	r3, [r2, #32]

    GPIOA->MODER |= (1 << 4); // PA2: Output
 8000330:	4b0b      	ldr	r3, [pc, #44]	@ (8000360 <GPIO_Init+0x64>)
 8000332:	681b      	ldr	r3, [r3, #0]
 8000334:	4a0a      	ldr	r2, [pc, #40]	@ (8000360 <GPIO_Init+0x64>)
 8000336:	f043 0310 	orr.w	r3, r3, #16
 800033a:	6013      	str	r3, [r2, #0]
    GPIOA->BSRR = GPIO_BSRR_BR2;
 800033c:	4b08      	ldr	r3, [pc, #32]	@ (8000360 <GPIO_Init+0x64>)
 800033e:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8000342:	619a      	str	r2, [r3, #24]

    GPIOA->MODER |= (1 << 6) | (1 << 8) | (1 << 10); // PA3-5: LED output
 8000344:	4b06      	ldr	r3, [pc, #24]	@ (8000360 <GPIO_Init+0x64>)
 8000346:	681b      	ldr	r3, [r3, #0]
 8000348:	4a05      	ldr	r2, [pc, #20]	@ (8000360 <GPIO_Init+0x64>)
 800034a:	f443 63a8 	orr.w	r3, r3, #1344	@ 0x540
 800034e:	6013      	str	r3, [r2, #0]
}
 8000350:	bf00      	nop
 8000352:	46bd      	mov	sp, r7
 8000354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000358:	4770      	bx	lr
 800035a:	bf00      	nop
 800035c:	40023800 	.word	0x40023800
 8000360:	40020000 	.word	0x40020000

08000364 <main>:
#include "tim2_pwm.h"
#include "usart1.h"
#include "motor_control.h"

int main(void)
{
 8000364:	b580      	push	{r7, lr}
 8000366:	b082      	sub	sp, #8
 8000368:	af00      	add	r7, sp, #0
    SystemClock_Config();
 800036a:	f000 f8bd 	bl	80004e8 <SystemClock_Config>
    GPIO_Init();
 800036e:	f7ff ffc5 	bl	80002fc <GPIO_Init>
    ADC_Init();
 8000372:	f7ff ff85 	bl	8000280 <ADC_Init>
    USART1_Config();
 8000376:	f000 f905 	bl	8000584 <USART1_Config>
    TIM2_Init();
 800037a:	f000 f8cf 	bl	800051c <TIM2_Init>

    while (1)
    {
        uint16_t adc_value = ADC_Read();
 800037e:	f7ff ffa3 	bl	80002c8 <ADC_Read>
 8000382:	4603      	mov	r3, r0
 8000384:	80fb      	strh	r3, [r7, #6]
        USART1_SendString("ADC = ");
 8000386:	4808      	ldr	r0, [pc, #32]	@ (80003a8 <main+0x44>)
 8000388:	f000 f956 	bl	8000638 <USART1_SendString>
        USART1_SendNumber(adc_value);
 800038c:	88fb      	ldrh	r3, [r7, #6]
 800038e:	4618      	mov	r0, r3
 8000390:	f000 f968 	bl	8000664 <USART1_SendNumber>
        USART1_SendString("\r\n");
 8000394:	4805      	ldr	r0, [pc, #20]	@ (80003ac <main+0x48>)
 8000396:	f000 f94f 	bl	8000638 <USART1_SendString>
        Motor_Control(adc_value);
 800039a:	88fb      	ldrh	r3, [r7, #6]
 800039c:	4618      	mov	r0, r3
 800039e:	f000 f807 	bl	80003b0 <Motor_Control>
    {
 80003a2:	bf00      	nop
 80003a4:	e7eb      	b.n	800037e <main+0x1a>
 80003a6:	bf00      	nop
 80003a8:	08001058 	.word	0x08001058
 80003ac:	08001060 	.word	0x08001060

080003b0 <Motor_Control>:
#include "stm32f4xx.h"
#include "motor_control.h"

void Motor_Control(uint16_t adc_value)
{
 80003b0:	b480      	push	{r7}
 80003b2:	b083      	sub	sp, #12
 80003b4:	af00      	add	r7, sp, #0
 80003b6:	4603      	mov	r3, r0
 80003b8:	80fb      	strh	r3, [r7, #6]
    if (adc_value < 1365)
 80003ba:	88fb      	ldrh	r3, [r7, #6]
 80003bc:	f240 5254 	movw	r2, #1364	@ 0x554
 80003c0:	4293      	cmp	r3, r2
 80003c2:	d807      	bhi.n	80003d4 <Motor_Control+0x24>
    {
        GPIOA->BSRR = GPIO_BSRR_BS3 | GPIO_BSRR_BR4 | GPIO_BSRR_BR5;
 80003c4:	4b11      	ldr	r3, [pc, #68]	@ (800040c <Motor_Control+0x5c>)
 80003c6:	4a12      	ldr	r2, [pc, #72]	@ (8000410 <Motor_Control+0x60>)
 80003c8:	619a      	str	r2, [r3, #24]
        TIM2->CCR2 = 250;
 80003ca:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80003ce:	22fa      	movs	r2, #250	@ 0xfa
 80003d0:	639a      	str	r2, [r3, #56]	@ 0x38
    else
    {
        GPIOA->BSRR = GPIO_BSRR_BR3 | GPIO_BSRR_BR4 | GPIO_BSRR_BS5;
        TIM2->CCR2 = 750;
    }
}
 80003d2:	e015      	b.n	8000400 <Motor_Control+0x50>
    else if (adc_value < 2730)
 80003d4:	88fb      	ldrh	r3, [r7, #6]
 80003d6:	f640 22a9 	movw	r2, #2729	@ 0xaa9
 80003da:	4293      	cmp	r3, r2
 80003dc:	d808      	bhi.n	80003f0 <Motor_Control+0x40>
        GPIOA->BSRR = GPIO_BSRR_BR3 | GPIO_BSRR_BS4 | GPIO_BSRR_BR5;
 80003de:	4b0b      	ldr	r3, [pc, #44]	@ (800040c <Motor_Control+0x5c>)
 80003e0:	4a0c      	ldr	r2, [pc, #48]	@ (8000414 <Motor_Control+0x64>)
 80003e2:	619a      	str	r2, [r3, #24]
        TIM2->CCR2 = 500;
 80003e4:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80003e8:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 80003ec:	639a      	str	r2, [r3, #56]	@ 0x38
}
 80003ee:	e007      	b.n	8000400 <Motor_Control+0x50>
        GPIOA->BSRR = GPIO_BSRR_BR3 | GPIO_BSRR_BR4 | GPIO_BSRR_BS5;
 80003f0:	4b06      	ldr	r3, [pc, #24]	@ (800040c <Motor_Control+0x5c>)
 80003f2:	4a09      	ldr	r2, [pc, #36]	@ (8000418 <Motor_Control+0x68>)
 80003f4:	619a      	str	r2, [r3, #24]
        TIM2->CCR2 = 750;
 80003f6:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80003fa:	f240 22ee 	movw	r2, #750	@ 0x2ee
 80003fe:	639a      	str	r2, [r3, #56]	@ 0x38
}
 8000400:	bf00      	nop
 8000402:	370c      	adds	r7, #12
 8000404:	46bd      	mov	sp, r7
 8000406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800040a:	4770      	bx	lr
 800040c:	40020000 	.word	0x40020000
 8000410:	00300008 	.word	0x00300008
 8000414:	00280010 	.word	0x00280010
 8000418:	00180020 	.word	0x00180020

0800041c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800041c:	b480      	push	{r7}
 800041e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000420:	bf00      	nop
 8000422:	e7fd      	b.n	8000420 <NMI_Handler+0x4>

08000424 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000424:	b480      	push	{r7}
 8000426:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000428:	bf00      	nop
 800042a:	e7fd      	b.n	8000428 <HardFault_Handler+0x4>

0800042c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800042c:	b480      	push	{r7}
 800042e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000430:	bf00      	nop
 8000432:	e7fd      	b.n	8000430 <MemManage_Handler+0x4>

08000434 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000434:	b480      	push	{r7}
 8000436:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000438:	bf00      	nop
 800043a:	e7fd      	b.n	8000438 <BusFault_Handler+0x4>

0800043c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800043c:	b480      	push	{r7}
 800043e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000440:	bf00      	nop
 8000442:	e7fd      	b.n	8000440 <UsageFault_Handler+0x4>

08000444 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000444:	b480      	push	{r7}
 8000446:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000448:	bf00      	nop
 800044a:	46bd      	mov	sp, r7
 800044c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000450:	4770      	bx	lr

08000452 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000452:	b480      	push	{r7}
 8000454:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000456:	bf00      	nop
 8000458:	46bd      	mov	sp, r7
 800045a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800045e:	4770      	bx	lr

08000460 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000460:	b480      	push	{r7}
 8000462:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000464:	bf00      	nop
 8000466:	46bd      	mov	sp, r7
 8000468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800046c:	4770      	bx	lr

0800046e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800046e:	b580      	push	{r7, lr}
 8000470:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000472:	f000 f939 	bl	80006e8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000476:	bf00      	nop
 8000478:	bd80      	pop	{r7, pc}
	...

0800047c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800047c:	b580      	push	{r7, lr}
 800047e:	b086      	sub	sp, #24
 8000480:	af00      	add	r7, sp, #0
 8000482:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000484:	4a14      	ldr	r2, [pc, #80]	@ (80004d8 <_sbrk+0x5c>)
 8000486:	4b15      	ldr	r3, [pc, #84]	@ (80004dc <_sbrk+0x60>)
 8000488:	1ad3      	subs	r3, r2, r3
 800048a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800048c:	697b      	ldr	r3, [r7, #20]
 800048e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000490:	4b13      	ldr	r3, [pc, #76]	@ (80004e0 <_sbrk+0x64>)
 8000492:	681b      	ldr	r3, [r3, #0]
 8000494:	2b00      	cmp	r3, #0
 8000496:	d102      	bne.n	800049e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000498:	4b11      	ldr	r3, [pc, #68]	@ (80004e0 <_sbrk+0x64>)
 800049a:	4a12      	ldr	r2, [pc, #72]	@ (80004e4 <_sbrk+0x68>)
 800049c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800049e:	4b10      	ldr	r3, [pc, #64]	@ (80004e0 <_sbrk+0x64>)
 80004a0:	681a      	ldr	r2, [r3, #0]
 80004a2:	687b      	ldr	r3, [r7, #4]
 80004a4:	4413      	add	r3, r2
 80004a6:	693a      	ldr	r2, [r7, #16]
 80004a8:	429a      	cmp	r2, r3
 80004aa:	d207      	bcs.n	80004bc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80004ac:	f000 f952 	bl	8000754 <__errno>
 80004b0:	4603      	mov	r3, r0
 80004b2:	220c      	movs	r2, #12
 80004b4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80004b6:	f04f 33ff 	mov.w	r3, #4294967295
 80004ba:	e009      	b.n	80004d0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80004bc:	4b08      	ldr	r3, [pc, #32]	@ (80004e0 <_sbrk+0x64>)
 80004be:	681b      	ldr	r3, [r3, #0]
 80004c0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80004c2:	4b07      	ldr	r3, [pc, #28]	@ (80004e0 <_sbrk+0x64>)
 80004c4:	681a      	ldr	r2, [r3, #0]
 80004c6:	687b      	ldr	r3, [r7, #4]
 80004c8:	4413      	add	r3, r2
 80004ca:	4a05      	ldr	r2, [pc, #20]	@ (80004e0 <_sbrk+0x64>)
 80004cc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80004ce:	68fb      	ldr	r3, [r7, #12]
}
 80004d0:	4618      	mov	r0, r3
 80004d2:	3718      	adds	r7, #24
 80004d4:	46bd      	mov	sp, r7
 80004d6:	bd80      	pop	{r7, pc}
 80004d8:	20010000 	.word	0x20010000
 80004dc:	00000400 	.word	0x00000400
 80004e0:	20000070 	.word	0x20000070
 80004e4:	200001c0 	.word	0x200001c0

080004e8 <SystemClock_Config>:
#include "system_clock.h"

void SystemClock_Config(void)
{
 80004e8:	b480      	push	{r7}
 80004ea:	af00      	add	r7, sp, #0
    // Clock system assumed to be configured to 16MHz
}
 80004ec:	bf00      	nop
 80004ee:	46bd      	mov	sp, r7
 80004f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004f4:	4770      	bx	lr
	...

080004f8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80004f8:	b480      	push	{r7}
 80004fa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80004fc:	4b06      	ldr	r3, [pc, #24]	@ (8000518 <SystemInit+0x20>)
 80004fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000502:	4a05      	ldr	r2, [pc, #20]	@ (8000518 <SystemInit+0x20>)
 8000504:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000508:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800050c:	bf00      	nop
 800050e:	46bd      	mov	sp, r7
 8000510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000514:	4770      	bx	lr
 8000516:	bf00      	nop
 8000518:	e000ed00 	.word	0xe000ed00

0800051c <TIM2_Init>:
#include "stm32f4xx.h"
#include "tim2_pwm.h"

void TIM2_Init(void)
{
 800051c:	b480      	push	{r7}
 800051e:	af00      	add	r7, sp, #0
    RCC->APB1ENR |= RCC_APB1ENR_TIM2EN;
 8000520:	4b17      	ldr	r3, [pc, #92]	@ (8000580 <TIM2_Init+0x64>)
 8000522:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000524:	4a16      	ldr	r2, [pc, #88]	@ (8000580 <TIM2_Init+0x64>)
 8000526:	f043 0301 	orr.w	r3, r3, #1
 800052a:	6413      	str	r3, [r2, #64]	@ 0x40

    TIM2->PSC = 0;
 800052c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000530:	2200      	movs	r2, #0
 8000532:	629a      	str	r2, [r3, #40]	@ 0x28
    TIM2->ARR = 999;
 8000534:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000538:	f240 32e7 	movw	r2, #999	@ 0x3e7
 800053c:	62da      	str	r2, [r3, #44]	@ 0x2c
    TIM2->CCR2 = 0;
 800053e:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000542:	2200      	movs	r2, #0
 8000544:	639a      	str	r2, [r3, #56]	@ 0x38

    TIM2->CCMR1 |= (6 << 12); // PWM Mode 1 on CH2
 8000546:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800054a:	699b      	ldr	r3, [r3, #24]
 800054c:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000550:	f443 43c0 	orr.w	r3, r3, #24576	@ 0x6000
 8000554:	6193      	str	r3, [r2, #24]
    TIM2->CCER |= TIM_CCER_CC2E;
 8000556:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800055a:	6a1b      	ldr	r3, [r3, #32]
 800055c:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000560:	f043 0310 	orr.w	r3, r3, #16
 8000564:	6213      	str	r3, [r2, #32]
    TIM2->CR1 |= TIM_CR1_CEN;
 8000566:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800056a:	681b      	ldr	r3, [r3, #0]
 800056c:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000570:	f043 0301 	orr.w	r3, r3, #1
 8000574:	6013      	str	r3, [r2, #0]
}
 8000576:	bf00      	nop
 8000578:	46bd      	mov	sp, r7
 800057a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800057e:	4770      	bx	lr
 8000580:	40023800 	.word	0x40023800

08000584 <USART1_Config>:
#include "stm32f4xx.h"
#include "usart1.h"
#include <stdio.h>

void USART1_Config(void)
{
 8000584:	b480      	push	{r7}
 8000586:	af00      	add	r7, sp, #0
    RCC->AHB1ENR |= RCC_AHB1ENR_GPIOAEN;
 8000588:	4b1c      	ldr	r3, [pc, #112]	@ (80005fc <USART1_Config+0x78>)
 800058a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800058c:	4a1b      	ldr	r2, [pc, #108]	@ (80005fc <USART1_Config+0x78>)
 800058e:	f043 0301 	orr.w	r3, r3, #1
 8000592:	6313      	str	r3, [r2, #48]	@ 0x30
    RCC->APB2ENR |= RCC_APB2ENR_USART1EN;
 8000594:	4b19      	ldr	r3, [pc, #100]	@ (80005fc <USART1_Config+0x78>)
 8000596:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000598:	4a18      	ldr	r2, [pc, #96]	@ (80005fc <USART1_Config+0x78>)
 800059a:	f043 0310 	orr.w	r3, r3, #16
 800059e:	6453      	str	r3, [r2, #68]	@ 0x44

    GPIOA->MODER &= ~(3 << (9 * 2));
 80005a0:	4b17      	ldr	r3, [pc, #92]	@ (8000600 <USART1_Config+0x7c>)
 80005a2:	681b      	ldr	r3, [r3, #0]
 80005a4:	4a16      	ldr	r2, [pc, #88]	@ (8000600 <USART1_Config+0x7c>)
 80005a6:	f423 2340 	bic.w	r3, r3, #786432	@ 0xc0000
 80005aa:	6013      	str	r3, [r2, #0]
    GPIOA->MODER |= (2 << (9 * 2)); // AF
 80005ac:	4b14      	ldr	r3, [pc, #80]	@ (8000600 <USART1_Config+0x7c>)
 80005ae:	681b      	ldr	r3, [r3, #0]
 80005b0:	4a13      	ldr	r2, [pc, #76]	@ (8000600 <USART1_Config+0x7c>)
 80005b2:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80005b6:	6013      	str	r3, [r2, #0]
    GPIOA->AFR[1] &= ~(0xF << (1 * 4));
 80005b8:	4b11      	ldr	r3, [pc, #68]	@ (8000600 <USART1_Config+0x7c>)
 80005ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80005bc:	4a10      	ldr	r2, [pc, #64]	@ (8000600 <USART1_Config+0x7c>)
 80005be:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80005c2:	6253      	str	r3, [r2, #36]	@ 0x24
    GPIOA->AFR[1] |= (7 << (1 * 4));
 80005c4:	4b0e      	ldr	r3, [pc, #56]	@ (8000600 <USART1_Config+0x7c>)
 80005c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80005c8:	4a0d      	ldr	r2, [pc, #52]	@ (8000600 <USART1_Config+0x7c>)
 80005ca:	f043 0370 	orr.w	r3, r3, #112	@ 0x70
 80005ce:	6253      	str	r3, [r2, #36]	@ 0x24

    USART1->BRR = 0x683; // Baudrate 9600
 80005d0:	4b0c      	ldr	r3, [pc, #48]	@ (8000604 <USART1_Config+0x80>)
 80005d2:	f240 6283 	movw	r2, #1667	@ 0x683
 80005d6:	609a      	str	r2, [r3, #8]
    USART1->CR1 |= USART_CR1_TE;
 80005d8:	4b0a      	ldr	r3, [pc, #40]	@ (8000604 <USART1_Config+0x80>)
 80005da:	68db      	ldr	r3, [r3, #12]
 80005dc:	4a09      	ldr	r2, [pc, #36]	@ (8000604 <USART1_Config+0x80>)
 80005de:	f043 0308 	orr.w	r3, r3, #8
 80005e2:	60d3      	str	r3, [r2, #12]
    USART1->CR1 |= USART_CR1_UE;
 80005e4:	4b07      	ldr	r3, [pc, #28]	@ (8000604 <USART1_Config+0x80>)
 80005e6:	68db      	ldr	r3, [r3, #12]
 80005e8:	4a06      	ldr	r2, [pc, #24]	@ (8000604 <USART1_Config+0x80>)
 80005ea:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80005ee:	60d3      	str	r3, [r2, #12]
}
 80005f0:	bf00      	nop
 80005f2:	46bd      	mov	sp, r7
 80005f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005f8:	4770      	bx	lr
 80005fa:	bf00      	nop
 80005fc:	40023800 	.word	0x40023800
 8000600:	40020000 	.word	0x40020000
 8000604:	40011000 	.word	0x40011000

08000608 <USART1_SendChar>:

void USART1_SendChar(char c)
{
 8000608:	b480      	push	{r7}
 800060a:	b083      	sub	sp, #12
 800060c:	af00      	add	r7, sp, #0
 800060e:	4603      	mov	r3, r0
 8000610:	71fb      	strb	r3, [r7, #7]
    while (!(USART1->SR & USART_SR_TXE));
 8000612:	bf00      	nop
 8000614:	4b07      	ldr	r3, [pc, #28]	@ (8000634 <USART1_SendChar+0x2c>)
 8000616:	681b      	ldr	r3, [r3, #0]
 8000618:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800061c:	2b00      	cmp	r3, #0
 800061e:	d0f9      	beq.n	8000614 <USART1_SendChar+0xc>
    USART1->DR = c;
 8000620:	4a04      	ldr	r2, [pc, #16]	@ (8000634 <USART1_SendChar+0x2c>)
 8000622:	79fb      	ldrb	r3, [r7, #7]
 8000624:	6053      	str	r3, [r2, #4]
}
 8000626:	bf00      	nop
 8000628:	370c      	adds	r7, #12
 800062a:	46bd      	mov	sp, r7
 800062c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000630:	4770      	bx	lr
 8000632:	bf00      	nop
 8000634:	40011000 	.word	0x40011000

08000638 <USART1_SendString>:

void USART1_SendString(char* str)
{
 8000638:	b580      	push	{r7, lr}
 800063a:	b082      	sub	sp, #8
 800063c:	af00      	add	r7, sp, #0
 800063e:	6078      	str	r0, [r7, #4]
    while (*str)
 8000640:	e006      	b.n	8000650 <USART1_SendString+0x18>
    {
        USART1_SendChar(*str++);
 8000642:	687b      	ldr	r3, [r7, #4]
 8000644:	1c5a      	adds	r2, r3, #1
 8000646:	607a      	str	r2, [r7, #4]
 8000648:	781b      	ldrb	r3, [r3, #0]
 800064a:	4618      	mov	r0, r3
 800064c:	f7ff ffdc 	bl	8000608 <USART1_SendChar>
    while (*str)
 8000650:	687b      	ldr	r3, [r7, #4]
 8000652:	781b      	ldrb	r3, [r3, #0]
 8000654:	2b00      	cmp	r3, #0
 8000656:	d1f4      	bne.n	8000642 <USART1_SendString+0xa>
    }
}
 8000658:	bf00      	nop
 800065a:	bf00      	nop
 800065c:	3708      	adds	r7, #8
 800065e:	46bd      	mov	sp, r7
 8000660:	bd80      	pop	{r7, pc}
	...

08000664 <USART1_SendNumber>:

void USART1_SendNumber(uint16_t num)
{
 8000664:	b580      	push	{r7, lr}
 8000666:	b086      	sub	sp, #24
 8000668:	af00      	add	r7, sp, #0
 800066a:	4603      	mov	r3, r0
 800066c:	80fb      	strh	r3, [r7, #6]
    char buffer[10];
    sprintf(buffer, "%u", num);
 800066e:	88fa      	ldrh	r2, [r7, #6]
 8000670:	f107 030c 	add.w	r3, r7, #12
 8000674:	4906      	ldr	r1, [pc, #24]	@ (8000690 <USART1_SendNumber+0x2c>)
 8000676:	4618      	mov	r0, r3
 8000678:	f000 f84a 	bl	8000710 <siprintf>
    USART1_SendString(buffer);
 800067c:	f107 030c 	add.w	r3, r7, #12
 8000680:	4618      	mov	r0, r3
 8000682:	f7ff ffd9 	bl	8000638 <USART1_SendString>
}
 8000686:	bf00      	nop
 8000688:	3718      	adds	r7, #24
 800068a:	46bd      	mov	sp, r7
 800068c:	bd80      	pop	{r7, pc}
 800068e:	bf00      	nop
 8000690:	08001064 	.word	0x08001064

08000694 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000694:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80006cc <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000698:	f7ff ff2e 	bl	80004f8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800069c:	480c      	ldr	r0, [pc, #48]	@ (80006d0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800069e:	490d      	ldr	r1, [pc, #52]	@ (80006d4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80006a0:	4a0d      	ldr	r2, [pc, #52]	@ (80006d8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80006a2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80006a4:	e002      	b.n	80006ac <LoopCopyDataInit>

080006a6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80006a6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80006a8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80006aa:	3304      	adds	r3, #4

080006ac <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80006ac:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80006ae:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80006b0:	d3f9      	bcc.n	80006a6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80006b2:	4a0a      	ldr	r2, [pc, #40]	@ (80006dc <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80006b4:	4c0a      	ldr	r4, [pc, #40]	@ (80006e0 <LoopFillZerobss+0x22>)
  movs r3, #0
 80006b6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80006b8:	e001      	b.n	80006be <LoopFillZerobss>

080006ba <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80006ba:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80006bc:	3204      	adds	r2, #4

080006be <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80006be:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80006c0:	d3fb      	bcc.n	80006ba <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80006c2:	f000 f84d 	bl	8000760 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80006c6:	f7ff fe4d 	bl	8000364 <main>
  bx  lr    
 80006ca:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80006cc:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 80006d0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80006d4:	20000054 	.word	0x20000054
  ldr r2, =_sidata
 80006d8:	080010ac 	.word	0x080010ac
  ldr r2, =_sbss
 80006dc:	20000054 	.word	0x20000054
  ldr r4, =_ebss
 80006e0:	200001c0 	.word	0x200001c0

080006e4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80006e4:	e7fe      	b.n	80006e4 <ADC_IRQHandler>
	...

080006e8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80006e8:	b480      	push	{r7}
 80006ea:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80006ec:	4b06      	ldr	r3, [pc, #24]	@ (8000708 <HAL_IncTick+0x20>)
 80006ee:	781b      	ldrb	r3, [r3, #0]
 80006f0:	461a      	mov	r2, r3
 80006f2:	4b06      	ldr	r3, [pc, #24]	@ (800070c <HAL_IncTick+0x24>)
 80006f4:	681b      	ldr	r3, [r3, #0]
 80006f6:	4413      	add	r3, r2
 80006f8:	4a04      	ldr	r2, [pc, #16]	@ (800070c <HAL_IncTick+0x24>)
 80006fa:	6013      	str	r3, [r2, #0]
}
 80006fc:	bf00      	nop
 80006fe:	46bd      	mov	sp, r7
 8000700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000704:	4770      	bx	lr
 8000706:	bf00      	nop
 8000708:	20000000 	.word	0x20000000
 800070c:	20000074 	.word	0x20000074

08000710 <siprintf>:
 8000710:	b40e      	push	{r1, r2, r3}
 8000712:	b510      	push	{r4, lr}
 8000714:	b09d      	sub	sp, #116	@ 0x74
 8000716:	ab1f      	add	r3, sp, #124	@ 0x7c
 8000718:	9002      	str	r0, [sp, #8]
 800071a:	9006      	str	r0, [sp, #24]
 800071c:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8000720:	480a      	ldr	r0, [pc, #40]	@ (800074c <siprintf+0x3c>)
 8000722:	9107      	str	r1, [sp, #28]
 8000724:	9104      	str	r1, [sp, #16]
 8000726:	490a      	ldr	r1, [pc, #40]	@ (8000750 <siprintf+0x40>)
 8000728:	f853 2b04 	ldr.w	r2, [r3], #4
 800072c:	9105      	str	r1, [sp, #20]
 800072e:	2400      	movs	r4, #0
 8000730:	a902      	add	r1, sp, #8
 8000732:	6800      	ldr	r0, [r0, #0]
 8000734:	9301      	str	r3, [sp, #4]
 8000736:	941b      	str	r4, [sp, #108]	@ 0x6c
 8000738:	f000 f98c 	bl	8000a54 <_svfiprintf_r>
 800073c:	9b02      	ldr	r3, [sp, #8]
 800073e:	701c      	strb	r4, [r3, #0]
 8000740:	b01d      	add	sp, #116	@ 0x74
 8000742:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000746:	b003      	add	sp, #12
 8000748:	4770      	bx	lr
 800074a:	bf00      	nop
 800074c:	20000004 	.word	0x20000004
 8000750:	ffff0208 	.word	0xffff0208

08000754 <__errno>:
 8000754:	4b01      	ldr	r3, [pc, #4]	@ (800075c <__errno+0x8>)
 8000756:	6818      	ldr	r0, [r3, #0]
 8000758:	4770      	bx	lr
 800075a:	bf00      	nop
 800075c:	20000004 	.word	0x20000004

08000760 <__libc_init_array>:
 8000760:	b570      	push	{r4, r5, r6, lr}
 8000762:	4d0d      	ldr	r5, [pc, #52]	@ (8000798 <__libc_init_array+0x38>)
 8000764:	4c0d      	ldr	r4, [pc, #52]	@ (800079c <__libc_init_array+0x3c>)
 8000766:	1b64      	subs	r4, r4, r5
 8000768:	10a4      	asrs	r4, r4, #2
 800076a:	2600      	movs	r6, #0
 800076c:	42a6      	cmp	r6, r4
 800076e:	d109      	bne.n	8000784 <__libc_init_array+0x24>
 8000770:	4d0b      	ldr	r5, [pc, #44]	@ (80007a0 <__libc_init_array+0x40>)
 8000772:	4c0c      	ldr	r4, [pc, #48]	@ (80007a4 <__libc_init_array+0x44>)
 8000774:	f000 fc64 	bl	8001040 <_init>
 8000778:	1b64      	subs	r4, r4, r5
 800077a:	10a4      	asrs	r4, r4, #2
 800077c:	2600      	movs	r6, #0
 800077e:	42a6      	cmp	r6, r4
 8000780:	d105      	bne.n	800078e <__libc_init_array+0x2e>
 8000782:	bd70      	pop	{r4, r5, r6, pc}
 8000784:	f855 3b04 	ldr.w	r3, [r5], #4
 8000788:	4798      	blx	r3
 800078a:	3601      	adds	r6, #1
 800078c:	e7ee      	b.n	800076c <__libc_init_array+0xc>
 800078e:	f855 3b04 	ldr.w	r3, [r5], #4
 8000792:	4798      	blx	r3
 8000794:	3601      	adds	r6, #1
 8000796:	e7f2      	b.n	800077e <__libc_init_array+0x1e>
 8000798:	080010a4 	.word	0x080010a4
 800079c:	080010a4 	.word	0x080010a4
 80007a0:	080010a4 	.word	0x080010a4
 80007a4:	080010a8 	.word	0x080010a8

080007a8 <__retarget_lock_acquire_recursive>:
 80007a8:	4770      	bx	lr

080007aa <__retarget_lock_release_recursive>:
 80007aa:	4770      	bx	lr

080007ac <_free_r>:
 80007ac:	b538      	push	{r3, r4, r5, lr}
 80007ae:	4605      	mov	r5, r0
 80007b0:	2900      	cmp	r1, #0
 80007b2:	d041      	beq.n	8000838 <_free_r+0x8c>
 80007b4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80007b8:	1f0c      	subs	r4, r1, #4
 80007ba:	2b00      	cmp	r3, #0
 80007bc:	bfb8      	it	lt
 80007be:	18e4      	addlt	r4, r4, r3
 80007c0:	f000 f8e0 	bl	8000984 <__malloc_lock>
 80007c4:	4a1d      	ldr	r2, [pc, #116]	@ (800083c <_free_r+0x90>)
 80007c6:	6813      	ldr	r3, [r2, #0]
 80007c8:	b933      	cbnz	r3, 80007d8 <_free_r+0x2c>
 80007ca:	6063      	str	r3, [r4, #4]
 80007cc:	6014      	str	r4, [r2, #0]
 80007ce:	4628      	mov	r0, r5
 80007d0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80007d4:	f000 b8dc 	b.w	8000990 <__malloc_unlock>
 80007d8:	42a3      	cmp	r3, r4
 80007da:	d908      	bls.n	80007ee <_free_r+0x42>
 80007dc:	6820      	ldr	r0, [r4, #0]
 80007de:	1821      	adds	r1, r4, r0
 80007e0:	428b      	cmp	r3, r1
 80007e2:	bf01      	itttt	eq
 80007e4:	6819      	ldreq	r1, [r3, #0]
 80007e6:	685b      	ldreq	r3, [r3, #4]
 80007e8:	1809      	addeq	r1, r1, r0
 80007ea:	6021      	streq	r1, [r4, #0]
 80007ec:	e7ed      	b.n	80007ca <_free_r+0x1e>
 80007ee:	461a      	mov	r2, r3
 80007f0:	685b      	ldr	r3, [r3, #4]
 80007f2:	b10b      	cbz	r3, 80007f8 <_free_r+0x4c>
 80007f4:	42a3      	cmp	r3, r4
 80007f6:	d9fa      	bls.n	80007ee <_free_r+0x42>
 80007f8:	6811      	ldr	r1, [r2, #0]
 80007fa:	1850      	adds	r0, r2, r1
 80007fc:	42a0      	cmp	r0, r4
 80007fe:	d10b      	bne.n	8000818 <_free_r+0x6c>
 8000800:	6820      	ldr	r0, [r4, #0]
 8000802:	4401      	add	r1, r0
 8000804:	1850      	adds	r0, r2, r1
 8000806:	4283      	cmp	r3, r0
 8000808:	6011      	str	r1, [r2, #0]
 800080a:	d1e0      	bne.n	80007ce <_free_r+0x22>
 800080c:	6818      	ldr	r0, [r3, #0]
 800080e:	685b      	ldr	r3, [r3, #4]
 8000810:	6053      	str	r3, [r2, #4]
 8000812:	4408      	add	r0, r1
 8000814:	6010      	str	r0, [r2, #0]
 8000816:	e7da      	b.n	80007ce <_free_r+0x22>
 8000818:	d902      	bls.n	8000820 <_free_r+0x74>
 800081a:	230c      	movs	r3, #12
 800081c:	602b      	str	r3, [r5, #0]
 800081e:	e7d6      	b.n	80007ce <_free_r+0x22>
 8000820:	6820      	ldr	r0, [r4, #0]
 8000822:	1821      	adds	r1, r4, r0
 8000824:	428b      	cmp	r3, r1
 8000826:	bf04      	itt	eq
 8000828:	6819      	ldreq	r1, [r3, #0]
 800082a:	685b      	ldreq	r3, [r3, #4]
 800082c:	6063      	str	r3, [r4, #4]
 800082e:	bf04      	itt	eq
 8000830:	1809      	addeq	r1, r1, r0
 8000832:	6021      	streq	r1, [r4, #0]
 8000834:	6054      	str	r4, [r2, #4]
 8000836:	e7ca      	b.n	80007ce <_free_r+0x22>
 8000838:	bd38      	pop	{r3, r4, r5, pc}
 800083a:	bf00      	nop
 800083c:	200001bc 	.word	0x200001bc

08000840 <sbrk_aligned>:
 8000840:	b570      	push	{r4, r5, r6, lr}
 8000842:	4e0f      	ldr	r6, [pc, #60]	@ (8000880 <sbrk_aligned+0x40>)
 8000844:	460c      	mov	r4, r1
 8000846:	6831      	ldr	r1, [r6, #0]
 8000848:	4605      	mov	r5, r0
 800084a:	b911      	cbnz	r1, 8000852 <sbrk_aligned+0x12>
 800084c:	f000 fba4 	bl	8000f98 <_sbrk_r>
 8000850:	6030      	str	r0, [r6, #0]
 8000852:	4621      	mov	r1, r4
 8000854:	4628      	mov	r0, r5
 8000856:	f000 fb9f 	bl	8000f98 <_sbrk_r>
 800085a:	1c43      	adds	r3, r0, #1
 800085c:	d103      	bne.n	8000866 <sbrk_aligned+0x26>
 800085e:	f04f 34ff 	mov.w	r4, #4294967295
 8000862:	4620      	mov	r0, r4
 8000864:	bd70      	pop	{r4, r5, r6, pc}
 8000866:	1cc4      	adds	r4, r0, #3
 8000868:	f024 0403 	bic.w	r4, r4, #3
 800086c:	42a0      	cmp	r0, r4
 800086e:	d0f8      	beq.n	8000862 <sbrk_aligned+0x22>
 8000870:	1a21      	subs	r1, r4, r0
 8000872:	4628      	mov	r0, r5
 8000874:	f000 fb90 	bl	8000f98 <_sbrk_r>
 8000878:	3001      	adds	r0, #1
 800087a:	d1f2      	bne.n	8000862 <sbrk_aligned+0x22>
 800087c:	e7ef      	b.n	800085e <sbrk_aligned+0x1e>
 800087e:	bf00      	nop
 8000880:	200001b8 	.word	0x200001b8

08000884 <_malloc_r>:
 8000884:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000888:	1ccd      	adds	r5, r1, #3
 800088a:	f025 0503 	bic.w	r5, r5, #3
 800088e:	3508      	adds	r5, #8
 8000890:	2d0c      	cmp	r5, #12
 8000892:	bf38      	it	cc
 8000894:	250c      	movcc	r5, #12
 8000896:	2d00      	cmp	r5, #0
 8000898:	4606      	mov	r6, r0
 800089a:	db01      	blt.n	80008a0 <_malloc_r+0x1c>
 800089c:	42a9      	cmp	r1, r5
 800089e:	d904      	bls.n	80008aa <_malloc_r+0x26>
 80008a0:	230c      	movs	r3, #12
 80008a2:	6033      	str	r3, [r6, #0]
 80008a4:	2000      	movs	r0, #0
 80008a6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80008aa:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8000980 <_malloc_r+0xfc>
 80008ae:	f000 f869 	bl	8000984 <__malloc_lock>
 80008b2:	f8d8 3000 	ldr.w	r3, [r8]
 80008b6:	461c      	mov	r4, r3
 80008b8:	bb44      	cbnz	r4, 800090c <_malloc_r+0x88>
 80008ba:	4629      	mov	r1, r5
 80008bc:	4630      	mov	r0, r6
 80008be:	f7ff ffbf 	bl	8000840 <sbrk_aligned>
 80008c2:	1c43      	adds	r3, r0, #1
 80008c4:	4604      	mov	r4, r0
 80008c6:	d158      	bne.n	800097a <_malloc_r+0xf6>
 80008c8:	f8d8 4000 	ldr.w	r4, [r8]
 80008cc:	4627      	mov	r7, r4
 80008ce:	2f00      	cmp	r7, #0
 80008d0:	d143      	bne.n	800095a <_malloc_r+0xd6>
 80008d2:	2c00      	cmp	r4, #0
 80008d4:	d04b      	beq.n	800096e <_malloc_r+0xea>
 80008d6:	6823      	ldr	r3, [r4, #0]
 80008d8:	4639      	mov	r1, r7
 80008da:	4630      	mov	r0, r6
 80008dc:	eb04 0903 	add.w	r9, r4, r3
 80008e0:	f000 fb5a 	bl	8000f98 <_sbrk_r>
 80008e4:	4581      	cmp	r9, r0
 80008e6:	d142      	bne.n	800096e <_malloc_r+0xea>
 80008e8:	6821      	ldr	r1, [r4, #0]
 80008ea:	1a6d      	subs	r5, r5, r1
 80008ec:	4629      	mov	r1, r5
 80008ee:	4630      	mov	r0, r6
 80008f0:	f7ff ffa6 	bl	8000840 <sbrk_aligned>
 80008f4:	3001      	adds	r0, #1
 80008f6:	d03a      	beq.n	800096e <_malloc_r+0xea>
 80008f8:	6823      	ldr	r3, [r4, #0]
 80008fa:	442b      	add	r3, r5
 80008fc:	6023      	str	r3, [r4, #0]
 80008fe:	f8d8 3000 	ldr.w	r3, [r8]
 8000902:	685a      	ldr	r2, [r3, #4]
 8000904:	bb62      	cbnz	r2, 8000960 <_malloc_r+0xdc>
 8000906:	f8c8 7000 	str.w	r7, [r8]
 800090a:	e00f      	b.n	800092c <_malloc_r+0xa8>
 800090c:	6822      	ldr	r2, [r4, #0]
 800090e:	1b52      	subs	r2, r2, r5
 8000910:	d420      	bmi.n	8000954 <_malloc_r+0xd0>
 8000912:	2a0b      	cmp	r2, #11
 8000914:	d917      	bls.n	8000946 <_malloc_r+0xc2>
 8000916:	1961      	adds	r1, r4, r5
 8000918:	42a3      	cmp	r3, r4
 800091a:	6025      	str	r5, [r4, #0]
 800091c:	bf18      	it	ne
 800091e:	6059      	strne	r1, [r3, #4]
 8000920:	6863      	ldr	r3, [r4, #4]
 8000922:	bf08      	it	eq
 8000924:	f8c8 1000 	streq.w	r1, [r8]
 8000928:	5162      	str	r2, [r4, r5]
 800092a:	604b      	str	r3, [r1, #4]
 800092c:	4630      	mov	r0, r6
 800092e:	f000 f82f 	bl	8000990 <__malloc_unlock>
 8000932:	f104 000b 	add.w	r0, r4, #11
 8000936:	1d23      	adds	r3, r4, #4
 8000938:	f020 0007 	bic.w	r0, r0, #7
 800093c:	1ac2      	subs	r2, r0, r3
 800093e:	bf1c      	itt	ne
 8000940:	1a1b      	subne	r3, r3, r0
 8000942:	50a3      	strne	r3, [r4, r2]
 8000944:	e7af      	b.n	80008a6 <_malloc_r+0x22>
 8000946:	6862      	ldr	r2, [r4, #4]
 8000948:	42a3      	cmp	r3, r4
 800094a:	bf0c      	ite	eq
 800094c:	f8c8 2000 	streq.w	r2, [r8]
 8000950:	605a      	strne	r2, [r3, #4]
 8000952:	e7eb      	b.n	800092c <_malloc_r+0xa8>
 8000954:	4623      	mov	r3, r4
 8000956:	6864      	ldr	r4, [r4, #4]
 8000958:	e7ae      	b.n	80008b8 <_malloc_r+0x34>
 800095a:	463c      	mov	r4, r7
 800095c:	687f      	ldr	r7, [r7, #4]
 800095e:	e7b6      	b.n	80008ce <_malloc_r+0x4a>
 8000960:	461a      	mov	r2, r3
 8000962:	685b      	ldr	r3, [r3, #4]
 8000964:	42a3      	cmp	r3, r4
 8000966:	d1fb      	bne.n	8000960 <_malloc_r+0xdc>
 8000968:	2300      	movs	r3, #0
 800096a:	6053      	str	r3, [r2, #4]
 800096c:	e7de      	b.n	800092c <_malloc_r+0xa8>
 800096e:	230c      	movs	r3, #12
 8000970:	6033      	str	r3, [r6, #0]
 8000972:	4630      	mov	r0, r6
 8000974:	f000 f80c 	bl	8000990 <__malloc_unlock>
 8000978:	e794      	b.n	80008a4 <_malloc_r+0x20>
 800097a:	6005      	str	r5, [r0, #0]
 800097c:	e7d6      	b.n	800092c <_malloc_r+0xa8>
 800097e:	bf00      	nop
 8000980:	200001bc 	.word	0x200001bc

08000984 <__malloc_lock>:
 8000984:	4801      	ldr	r0, [pc, #4]	@ (800098c <__malloc_lock+0x8>)
 8000986:	f7ff bf0f 	b.w	80007a8 <__retarget_lock_acquire_recursive>
 800098a:	bf00      	nop
 800098c:	200001b4 	.word	0x200001b4

08000990 <__malloc_unlock>:
 8000990:	4801      	ldr	r0, [pc, #4]	@ (8000998 <__malloc_unlock+0x8>)
 8000992:	f7ff bf0a 	b.w	80007aa <__retarget_lock_release_recursive>
 8000996:	bf00      	nop
 8000998:	200001b4 	.word	0x200001b4

0800099c <__ssputs_r>:
 800099c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80009a0:	688e      	ldr	r6, [r1, #8]
 80009a2:	461f      	mov	r7, r3
 80009a4:	42be      	cmp	r6, r7
 80009a6:	680b      	ldr	r3, [r1, #0]
 80009a8:	4682      	mov	sl, r0
 80009aa:	460c      	mov	r4, r1
 80009ac:	4690      	mov	r8, r2
 80009ae:	d82d      	bhi.n	8000a0c <__ssputs_r+0x70>
 80009b0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80009b4:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80009b8:	d026      	beq.n	8000a08 <__ssputs_r+0x6c>
 80009ba:	6965      	ldr	r5, [r4, #20]
 80009bc:	6909      	ldr	r1, [r1, #16]
 80009be:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80009c2:	eba3 0901 	sub.w	r9, r3, r1
 80009c6:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80009ca:	1c7b      	adds	r3, r7, #1
 80009cc:	444b      	add	r3, r9
 80009ce:	106d      	asrs	r5, r5, #1
 80009d0:	429d      	cmp	r5, r3
 80009d2:	bf38      	it	cc
 80009d4:	461d      	movcc	r5, r3
 80009d6:	0553      	lsls	r3, r2, #21
 80009d8:	d527      	bpl.n	8000a2a <__ssputs_r+0x8e>
 80009da:	4629      	mov	r1, r5
 80009dc:	f7ff ff52 	bl	8000884 <_malloc_r>
 80009e0:	4606      	mov	r6, r0
 80009e2:	b360      	cbz	r0, 8000a3e <__ssputs_r+0xa2>
 80009e4:	6921      	ldr	r1, [r4, #16]
 80009e6:	464a      	mov	r2, r9
 80009e8:	f000 fae6 	bl	8000fb8 <memcpy>
 80009ec:	89a3      	ldrh	r3, [r4, #12]
 80009ee:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80009f2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80009f6:	81a3      	strh	r3, [r4, #12]
 80009f8:	6126      	str	r6, [r4, #16]
 80009fa:	6165      	str	r5, [r4, #20]
 80009fc:	444e      	add	r6, r9
 80009fe:	eba5 0509 	sub.w	r5, r5, r9
 8000a02:	6026      	str	r6, [r4, #0]
 8000a04:	60a5      	str	r5, [r4, #8]
 8000a06:	463e      	mov	r6, r7
 8000a08:	42be      	cmp	r6, r7
 8000a0a:	d900      	bls.n	8000a0e <__ssputs_r+0x72>
 8000a0c:	463e      	mov	r6, r7
 8000a0e:	6820      	ldr	r0, [r4, #0]
 8000a10:	4632      	mov	r2, r6
 8000a12:	4641      	mov	r1, r8
 8000a14:	f000 faa6 	bl	8000f64 <memmove>
 8000a18:	68a3      	ldr	r3, [r4, #8]
 8000a1a:	1b9b      	subs	r3, r3, r6
 8000a1c:	60a3      	str	r3, [r4, #8]
 8000a1e:	6823      	ldr	r3, [r4, #0]
 8000a20:	4433      	add	r3, r6
 8000a22:	6023      	str	r3, [r4, #0]
 8000a24:	2000      	movs	r0, #0
 8000a26:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000a2a:	462a      	mov	r2, r5
 8000a2c:	f000 fad2 	bl	8000fd4 <_realloc_r>
 8000a30:	4606      	mov	r6, r0
 8000a32:	2800      	cmp	r0, #0
 8000a34:	d1e0      	bne.n	80009f8 <__ssputs_r+0x5c>
 8000a36:	6921      	ldr	r1, [r4, #16]
 8000a38:	4650      	mov	r0, sl
 8000a3a:	f7ff feb7 	bl	80007ac <_free_r>
 8000a3e:	230c      	movs	r3, #12
 8000a40:	f8ca 3000 	str.w	r3, [sl]
 8000a44:	89a3      	ldrh	r3, [r4, #12]
 8000a46:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000a4a:	81a3      	strh	r3, [r4, #12]
 8000a4c:	f04f 30ff 	mov.w	r0, #4294967295
 8000a50:	e7e9      	b.n	8000a26 <__ssputs_r+0x8a>
	...

08000a54 <_svfiprintf_r>:
 8000a54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000a58:	4698      	mov	r8, r3
 8000a5a:	898b      	ldrh	r3, [r1, #12]
 8000a5c:	061b      	lsls	r3, r3, #24
 8000a5e:	b09d      	sub	sp, #116	@ 0x74
 8000a60:	4607      	mov	r7, r0
 8000a62:	460d      	mov	r5, r1
 8000a64:	4614      	mov	r4, r2
 8000a66:	d510      	bpl.n	8000a8a <_svfiprintf_r+0x36>
 8000a68:	690b      	ldr	r3, [r1, #16]
 8000a6a:	b973      	cbnz	r3, 8000a8a <_svfiprintf_r+0x36>
 8000a6c:	2140      	movs	r1, #64	@ 0x40
 8000a6e:	f7ff ff09 	bl	8000884 <_malloc_r>
 8000a72:	6028      	str	r0, [r5, #0]
 8000a74:	6128      	str	r0, [r5, #16]
 8000a76:	b930      	cbnz	r0, 8000a86 <_svfiprintf_r+0x32>
 8000a78:	230c      	movs	r3, #12
 8000a7a:	603b      	str	r3, [r7, #0]
 8000a7c:	f04f 30ff 	mov.w	r0, #4294967295
 8000a80:	b01d      	add	sp, #116	@ 0x74
 8000a82:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000a86:	2340      	movs	r3, #64	@ 0x40
 8000a88:	616b      	str	r3, [r5, #20]
 8000a8a:	2300      	movs	r3, #0
 8000a8c:	9309      	str	r3, [sp, #36]	@ 0x24
 8000a8e:	2320      	movs	r3, #32
 8000a90:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8000a94:	f8cd 800c 	str.w	r8, [sp, #12]
 8000a98:	2330      	movs	r3, #48	@ 0x30
 8000a9a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8000c38 <_svfiprintf_r+0x1e4>
 8000a9e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8000aa2:	f04f 0901 	mov.w	r9, #1
 8000aa6:	4623      	mov	r3, r4
 8000aa8:	469a      	mov	sl, r3
 8000aaa:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000aae:	b10a      	cbz	r2, 8000ab4 <_svfiprintf_r+0x60>
 8000ab0:	2a25      	cmp	r2, #37	@ 0x25
 8000ab2:	d1f9      	bne.n	8000aa8 <_svfiprintf_r+0x54>
 8000ab4:	ebba 0b04 	subs.w	fp, sl, r4
 8000ab8:	d00b      	beq.n	8000ad2 <_svfiprintf_r+0x7e>
 8000aba:	465b      	mov	r3, fp
 8000abc:	4622      	mov	r2, r4
 8000abe:	4629      	mov	r1, r5
 8000ac0:	4638      	mov	r0, r7
 8000ac2:	f7ff ff6b 	bl	800099c <__ssputs_r>
 8000ac6:	3001      	adds	r0, #1
 8000ac8:	f000 80a7 	beq.w	8000c1a <_svfiprintf_r+0x1c6>
 8000acc:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8000ace:	445a      	add	r2, fp
 8000ad0:	9209      	str	r2, [sp, #36]	@ 0x24
 8000ad2:	f89a 3000 	ldrb.w	r3, [sl]
 8000ad6:	2b00      	cmp	r3, #0
 8000ad8:	f000 809f 	beq.w	8000c1a <_svfiprintf_r+0x1c6>
 8000adc:	2300      	movs	r3, #0
 8000ade:	f04f 32ff 	mov.w	r2, #4294967295
 8000ae2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8000ae6:	f10a 0a01 	add.w	sl, sl, #1
 8000aea:	9304      	str	r3, [sp, #16]
 8000aec:	9307      	str	r3, [sp, #28]
 8000aee:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8000af2:	931a      	str	r3, [sp, #104]	@ 0x68
 8000af4:	4654      	mov	r4, sl
 8000af6:	2205      	movs	r2, #5
 8000af8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8000afc:	484e      	ldr	r0, [pc, #312]	@ (8000c38 <_svfiprintf_r+0x1e4>)
 8000afe:	f7ff fb6f 	bl	80001e0 <memchr>
 8000b02:	9a04      	ldr	r2, [sp, #16]
 8000b04:	b9d8      	cbnz	r0, 8000b3e <_svfiprintf_r+0xea>
 8000b06:	06d0      	lsls	r0, r2, #27
 8000b08:	bf44      	itt	mi
 8000b0a:	2320      	movmi	r3, #32
 8000b0c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8000b10:	0711      	lsls	r1, r2, #28
 8000b12:	bf44      	itt	mi
 8000b14:	232b      	movmi	r3, #43	@ 0x2b
 8000b16:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8000b1a:	f89a 3000 	ldrb.w	r3, [sl]
 8000b1e:	2b2a      	cmp	r3, #42	@ 0x2a
 8000b20:	d015      	beq.n	8000b4e <_svfiprintf_r+0xfa>
 8000b22:	9a07      	ldr	r2, [sp, #28]
 8000b24:	4654      	mov	r4, sl
 8000b26:	2000      	movs	r0, #0
 8000b28:	f04f 0c0a 	mov.w	ip, #10
 8000b2c:	4621      	mov	r1, r4
 8000b2e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000b32:	3b30      	subs	r3, #48	@ 0x30
 8000b34:	2b09      	cmp	r3, #9
 8000b36:	d94b      	bls.n	8000bd0 <_svfiprintf_r+0x17c>
 8000b38:	b1b0      	cbz	r0, 8000b68 <_svfiprintf_r+0x114>
 8000b3a:	9207      	str	r2, [sp, #28]
 8000b3c:	e014      	b.n	8000b68 <_svfiprintf_r+0x114>
 8000b3e:	eba0 0308 	sub.w	r3, r0, r8
 8000b42:	fa09 f303 	lsl.w	r3, r9, r3
 8000b46:	4313      	orrs	r3, r2
 8000b48:	9304      	str	r3, [sp, #16]
 8000b4a:	46a2      	mov	sl, r4
 8000b4c:	e7d2      	b.n	8000af4 <_svfiprintf_r+0xa0>
 8000b4e:	9b03      	ldr	r3, [sp, #12]
 8000b50:	1d19      	adds	r1, r3, #4
 8000b52:	681b      	ldr	r3, [r3, #0]
 8000b54:	9103      	str	r1, [sp, #12]
 8000b56:	2b00      	cmp	r3, #0
 8000b58:	bfbb      	ittet	lt
 8000b5a:	425b      	neglt	r3, r3
 8000b5c:	f042 0202 	orrlt.w	r2, r2, #2
 8000b60:	9307      	strge	r3, [sp, #28]
 8000b62:	9307      	strlt	r3, [sp, #28]
 8000b64:	bfb8      	it	lt
 8000b66:	9204      	strlt	r2, [sp, #16]
 8000b68:	7823      	ldrb	r3, [r4, #0]
 8000b6a:	2b2e      	cmp	r3, #46	@ 0x2e
 8000b6c:	d10a      	bne.n	8000b84 <_svfiprintf_r+0x130>
 8000b6e:	7863      	ldrb	r3, [r4, #1]
 8000b70:	2b2a      	cmp	r3, #42	@ 0x2a
 8000b72:	d132      	bne.n	8000bda <_svfiprintf_r+0x186>
 8000b74:	9b03      	ldr	r3, [sp, #12]
 8000b76:	1d1a      	adds	r2, r3, #4
 8000b78:	681b      	ldr	r3, [r3, #0]
 8000b7a:	9203      	str	r2, [sp, #12]
 8000b7c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8000b80:	3402      	adds	r4, #2
 8000b82:	9305      	str	r3, [sp, #20]
 8000b84:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8000c48 <_svfiprintf_r+0x1f4>
 8000b88:	7821      	ldrb	r1, [r4, #0]
 8000b8a:	2203      	movs	r2, #3
 8000b8c:	4650      	mov	r0, sl
 8000b8e:	f7ff fb27 	bl	80001e0 <memchr>
 8000b92:	b138      	cbz	r0, 8000ba4 <_svfiprintf_r+0x150>
 8000b94:	9b04      	ldr	r3, [sp, #16]
 8000b96:	eba0 000a 	sub.w	r0, r0, sl
 8000b9a:	2240      	movs	r2, #64	@ 0x40
 8000b9c:	4082      	lsls	r2, r0
 8000b9e:	4313      	orrs	r3, r2
 8000ba0:	3401      	adds	r4, #1
 8000ba2:	9304      	str	r3, [sp, #16]
 8000ba4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8000ba8:	4824      	ldr	r0, [pc, #144]	@ (8000c3c <_svfiprintf_r+0x1e8>)
 8000baa:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8000bae:	2206      	movs	r2, #6
 8000bb0:	f7ff fb16 	bl	80001e0 <memchr>
 8000bb4:	2800      	cmp	r0, #0
 8000bb6:	d036      	beq.n	8000c26 <_svfiprintf_r+0x1d2>
 8000bb8:	4b21      	ldr	r3, [pc, #132]	@ (8000c40 <_svfiprintf_r+0x1ec>)
 8000bba:	bb1b      	cbnz	r3, 8000c04 <_svfiprintf_r+0x1b0>
 8000bbc:	9b03      	ldr	r3, [sp, #12]
 8000bbe:	3307      	adds	r3, #7
 8000bc0:	f023 0307 	bic.w	r3, r3, #7
 8000bc4:	3308      	adds	r3, #8
 8000bc6:	9303      	str	r3, [sp, #12]
 8000bc8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8000bca:	4433      	add	r3, r6
 8000bcc:	9309      	str	r3, [sp, #36]	@ 0x24
 8000bce:	e76a      	b.n	8000aa6 <_svfiprintf_r+0x52>
 8000bd0:	fb0c 3202 	mla	r2, ip, r2, r3
 8000bd4:	460c      	mov	r4, r1
 8000bd6:	2001      	movs	r0, #1
 8000bd8:	e7a8      	b.n	8000b2c <_svfiprintf_r+0xd8>
 8000bda:	2300      	movs	r3, #0
 8000bdc:	3401      	adds	r4, #1
 8000bde:	9305      	str	r3, [sp, #20]
 8000be0:	4619      	mov	r1, r3
 8000be2:	f04f 0c0a 	mov.w	ip, #10
 8000be6:	4620      	mov	r0, r4
 8000be8:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000bec:	3a30      	subs	r2, #48	@ 0x30
 8000bee:	2a09      	cmp	r2, #9
 8000bf0:	d903      	bls.n	8000bfa <_svfiprintf_r+0x1a6>
 8000bf2:	2b00      	cmp	r3, #0
 8000bf4:	d0c6      	beq.n	8000b84 <_svfiprintf_r+0x130>
 8000bf6:	9105      	str	r1, [sp, #20]
 8000bf8:	e7c4      	b.n	8000b84 <_svfiprintf_r+0x130>
 8000bfa:	fb0c 2101 	mla	r1, ip, r1, r2
 8000bfe:	4604      	mov	r4, r0
 8000c00:	2301      	movs	r3, #1
 8000c02:	e7f0      	b.n	8000be6 <_svfiprintf_r+0x192>
 8000c04:	ab03      	add	r3, sp, #12
 8000c06:	9300      	str	r3, [sp, #0]
 8000c08:	462a      	mov	r2, r5
 8000c0a:	4b0e      	ldr	r3, [pc, #56]	@ (8000c44 <_svfiprintf_r+0x1f0>)
 8000c0c:	a904      	add	r1, sp, #16
 8000c0e:	4638      	mov	r0, r7
 8000c10:	f3af 8000 	nop.w
 8000c14:	1c42      	adds	r2, r0, #1
 8000c16:	4606      	mov	r6, r0
 8000c18:	d1d6      	bne.n	8000bc8 <_svfiprintf_r+0x174>
 8000c1a:	89ab      	ldrh	r3, [r5, #12]
 8000c1c:	065b      	lsls	r3, r3, #25
 8000c1e:	f53f af2d 	bmi.w	8000a7c <_svfiprintf_r+0x28>
 8000c22:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8000c24:	e72c      	b.n	8000a80 <_svfiprintf_r+0x2c>
 8000c26:	ab03      	add	r3, sp, #12
 8000c28:	9300      	str	r3, [sp, #0]
 8000c2a:	462a      	mov	r2, r5
 8000c2c:	4b05      	ldr	r3, [pc, #20]	@ (8000c44 <_svfiprintf_r+0x1f0>)
 8000c2e:	a904      	add	r1, sp, #16
 8000c30:	4638      	mov	r0, r7
 8000c32:	f000 f879 	bl	8000d28 <_printf_i>
 8000c36:	e7ed      	b.n	8000c14 <_svfiprintf_r+0x1c0>
 8000c38:	08001067 	.word	0x08001067
 8000c3c:	08001071 	.word	0x08001071
 8000c40:	00000000 	.word	0x00000000
 8000c44:	0800099d 	.word	0x0800099d
 8000c48:	0800106d 	.word	0x0800106d

08000c4c <_printf_common>:
 8000c4c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c50:	4616      	mov	r6, r2
 8000c52:	4698      	mov	r8, r3
 8000c54:	688a      	ldr	r2, [r1, #8]
 8000c56:	690b      	ldr	r3, [r1, #16]
 8000c58:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8000c5c:	4293      	cmp	r3, r2
 8000c5e:	bfb8      	it	lt
 8000c60:	4613      	movlt	r3, r2
 8000c62:	6033      	str	r3, [r6, #0]
 8000c64:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8000c68:	4607      	mov	r7, r0
 8000c6a:	460c      	mov	r4, r1
 8000c6c:	b10a      	cbz	r2, 8000c72 <_printf_common+0x26>
 8000c6e:	3301      	adds	r3, #1
 8000c70:	6033      	str	r3, [r6, #0]
 8000c72:	6823      	ldr	r3, [r4, #0]
 8000c74:	0699      	lsls	r1, r3, #26
 8000c76:	bf42      	ittt	mi
 8000c78:	6833      	ldrmi	r3, [r6, #0]
 8000c7a:	3302      	addmi	r3, #2
 8000c7c:	6033      	strmi	r3, [r6, #0]
 8000c7e:	6825      	ldr	r5, [r4, #0]
 8000c80:	f015 0506 	ands.w	r5, r5, #6
 8000c84:	d106      	bne.n	8000c94 <_printf_common+0x48>
 8000c86:	f104 0a19 	add.w	sl, r4, #25
 8000c8a:	68e3      	ldr	r3, [r4, #12]
 8000c8c:	6832      	ldr	r2, [r6, #0]
 8000c8e:	1a9b      	subs	r3, r3, r2
 8000c90:	42ab      	cmp	r3, r5
 8000c92:	dc26      	bgt.n	8000ce2 <_printf_common+0x96>
 8000c94:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8000c98:	6822      	ldr	r2, [r4, #0]
 8000c9a:	3b00      	subs	r3, #0
 8000c9c:	bf18      	it	ne
 8000c9e:	2301      	movne	r3, #1
 8000ca0:	0692      	lsls	r2, r2, #26
 8000ca2:	d42b      	bmi.n	8000cfc <_printf_common+0xb0>
 8000ca4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8000ca8:	4641      	mov	r1, r8
 8000caa:	4638      	mov	r0, r7
 8000cac:	47c8      	blx	r9
 8000cae:	3001      	adds	r0, #1
 8000cb0:	d01e      	beq.n	8000cf0 <_printf_common+0xa4>
 8000cb2:	6823      	ldr	r3, [r4, #0]
 8000cb4:	6922      	ldr	r2, [r4, #16]
 8000cb6:	f003 0306 	and.w	r3, r3, #6
 8000cba:	2b04      	cmp	r3, #4
 8000cbc:	bf02      	ittt	eq
 8000cbe:	68e5      	ldreq	r5, [r4, #12]
 8000cc0:	6833      	ldreq	r3, [r6, #0]
 8000cc2:	1aed      	subeq	r5, r5, r3
 8000cc4:	68a3      	ldr	r3, [r4, #8]
 8000cc6:	bf0c      	ite	eq
 8000cc8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8000ccc:	2500      	movne	r5, #0
 8000cce:	4293      	cmp	r3, r2
 8000cd0:	bfc4      	itt	gt
 8000cd2:	1a9b      	subgt	r3, r3, r2
 8000cd4:	18ed      	addgt	r5, r5, r3
 8000cd6:	2600      	movs	r6, #0
 8000cd8:	341a      	adds	r4, #26
 8000cda:	42b5      	cmp	r5, r6
 8000cdc:	d11a      	bne.n	8000d14 <_printf_common+0xc8>
 8000cde:	2000      	movs	r0, #0
 8000ce0:	e008      	b.n	8000cf4 <_printf_common+0xa8>
 8000ce2:	2301      	movs	r3, #1
 8000ce4:	4652      	mov	r2, sl
 8000ce6:	4641      	mov	r1, r8
 8000ce8:	4638      	mov	r0, r7
 8000cea:	47c8      	blx	r9
 8000cec:	3001      	adds	r0, #1
 8000cee:	d103      	bne.n	8000cf8 <_printf_common+0xac>
 8000cf0:	f04f 30ff 	mov.w	r0, #4294967295
 8000cf4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cf8:	3501      	adds	r5, #1
 8000cfa:	e7c6      	b.n	8000c8a <_printf_common+0x3e>
 8000cfc:	18e1      	adds	r1, r4, r3
 8000cfe:	1c5a      	adds	r2, r3, #1
 8000d00:	2030      	movs	r0, #48	@ 0x30
 8000d02:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8000d06:	4422      	add	r2, r4
 8000d08:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8000d0c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8000d10:	3302      	adds	r3, #2
 8000d12:	e7c7      	b.n	8000ca4 <_printf_common+0x58>
 8000d14:	2301      	movs	r3, #1
 8000d16:	4622      	mov	r2, r4
 8000d18:	4641      	mov	r1, r8
 8000d1a:	4638      	mov	r0, r7
 8000d1c:	47c8      	blx	r9
 8000d1e:	3001      	adds	r0, #1
 8000d20:	d0e6      	beq.n	8000cf0 <_printf_common+0xa4>
 8000d22:	3601      	adds	r6, #1
 8000d24:	e7d9      	b.n	8000cda <_printf_common+0x8e>
	...

08000d28 <_printf_i>:
 8000d28:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8000d2c:	7e0f      	ldrb	r7, [r1, #24]
 8000d2e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8000d30:	2f78      	cmp	r7, #120	@ 0x78
 8000d32:	4691      	mov	r9, r2
 8000d34:	4680      	mov	r8, r0
 8000d36:	460c      	mov	r4, r1
 8000d38:	469a      	mov	sl, r3
 8000d3a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8000d3e:	d807      	bhi.n	8000d50 <_printf_i+0x28>
 8000d40:	2f62      	cmp	r7, #98	@ 0x62
 8000d42:	d80a      	bhi.n	8000d5a <_printf_i+0x32>
 8000d44:	2f00      	cmp	r7, #0
 8000d46:	f000 80d1 	beq.w	8000eec <_printf_i+0x1c4>
 8000d4a:	2f58      	cmp	r7, #88	@ 0x58
 8000d4c:	f000 80b8 	beq.w	8000ec0 <_printf_i+0x198>
 8000d50:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8000d54:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8000d58:	e03a      	b.n	8000dd0 <_printf_i+0xa8>
 8000d5a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8000d5e:	2b15      	cmp	r3, #21
 8000d60:	d8f6      	bhi.n	8000d50 <_printf_i+0x28>
 8000d62:	a101      	add	r1, pc, #4	@ (adr r1, 8000d68 <_printf_i+0x40>)
 8000d64:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8000d68:	08000dc1 	.word	0x08000dc1
 8000d6c:	08000dd5 	.word	0x08000dd5
 8000d70:	08000d51 	.word	0x08000d51
 8000d74:	08000d51 	.word	0x08000d51
 8000d78:	08000d51 	.word	0x08000d51
 8000d7c:	08000d51 	.word	0x08000d51
 8000d80:	08000dd5 	.word	0x08000dd5
 8000d84:	08000d51 	.word	0x08000d51
 8000d88:	08000d51 	.word	0x08000d51
 8000d8c:	08000d51 	.word	0x08000d51
 8000d90:	08000d51 	.word	0x08000d51
 8000d94:	08000ed3 	.word	0x08000ed3
 8000d98:	08000dff 	.word	0x08000dff
 8000d9c:	08000e8d 	.word	0x08000e8d
 8000da0:	08000d51 	.word	0x08000d51
 8000da4:	08000d51 	.word	0x08000d51
 8000da8:	08000ef5 	.word	0x08000ef5
 8000dac:	08000d51 	.word	0x08000d51
 8000db0:	08000dff 	.word	0x08000dff
 8000db4:	08000d51 	.word	0x08000d51
 8000db8:	08000d51 	.word	0x08000d51
 8000dbc:	08000e95 	.word	0x08000e95
 8000dc0:	6833      	ldr	r3, [r6, #0]
 8000dc2:	1d1a      	adds	r2, r3, #4
 8000dc4:	681b      	ldr	r3, [r3, #0]
 8000dc6:	6032      	str	r2, [r6, #0]
 8000dc8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8000dcc:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8000dd0:	2301      	movs	r3, #1
 8000dd2:	e09c      	b.n	8000f0e <_printf_i+0x1e6>
 8000dd4:	6833      	ldr	r3, [r6, #0]
 8000dd6:	6820      	ldr	r0, [r4, #0]
 8000dd8:	1d19      	adds	r1, r3, #4
 8000dda:	6031      	str	r1, [r6, #0]
 8000ddc:	0606      	lsls	r6, r0, #24
 8000dde:	d501      	bpl.n	8000de4 <_printf_i+0xbc>
 8000de0:	681d      	ldr	r5, [r3, #0]
 8000de2:	e003      	b.n	8000dec <_printf_i+0xc4>
 8000de4:	0645      	lsls	r5, r0, #25
 8000de6:	d5fb      	bpl.n	8000de0 <_printf_i+0xb8>
 8000de8:	f9b3 5000 	ldrsh.w	r5, [r3]
 8000dec:	2d00      	cmp	r5, #0
 8000dee:	da03      	bge.n	8000df8 <_printf_i+0xd0>
 8000df0:	232d      	movs	r3, #45	@ 0x2d
 8000df2:	426d      	negs	r5, r5
 8000df4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8000df8:	4858      	ldr	r0, [pc, #352]	@ (8000f5c <_printf_i+0x234>)
 8000dfa:	230a      	movs	r3, #10
 8000dfc:	e011      	b.n	8000e22 <_printf_i+0xfa>
 8000dfe:	6821      	ldr	r1, [r4, #0]
 8000e00:	6833      	ldr	r3, [r6, #0]
 8000e02:	0608      	lsls	r0, r1, #24
 8000e04:	f853 5b04 	ldr.w	r5, [r3], #4
 8000e08:	d402      	bmi.n	8000e10 <_printf_i+0xe8>
 8000e0a:	0649      	lsls	r1, r1, #25
 8000e0c:	bf48      	it	mi
 8000e0e:	b2ad      	uxthmi	r5, r5
 8000e10:	2f6f      	cmp	r7, #111	@ 0x6f
 8000e12:	4852      	ldr	r0, [pc, #328]	@ (8000f5c <_printf_i+0x234>)
 8000e14:	6033      	str	r3, [r6, #0]
 8000e16:	bf14      	ite	ne
 8000e18:	230a      	movne	r3, #10
 8000e1a:	2308      	moveq	r3, #8
 8000e1c:	2100      	movs	r1, #0
 8000e1e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8000e22:	6866      	ldr	r6, [r4, #4]
 8000e24:	60a6      	str	r6, [r4, #8]
 8000e26:	2e00      	cmp	r6, #0
 8000e28:	db05      	blt.n	8000e36 <_printf_i+0x10e>
 8000e2a:	6821      	ldr	r1, [r4, #0]
 8000e2c:	432e      	orrs	r6, r5
 8000e2e:	f021 0104 	bic.w	r1, r1, #4
 8000e32:	6021      	str	r1, [r4, #0]
 8000e34:	d04b      	beq.n	8000ece <_printf_i+0x1a6>
 8000e36:	4616      	mov	r6, r2
 8000e38:	fbb5 f1f3 	udiv	r1, r5, r3
 8000e3c:	fb03 5711 	mls	r7, r3, r1, r5
 8000e40:	5dc7      	ldrb	r7, [r0, r7]
 8000e42:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8000e46:	462f      	mov	r7, r5
 8000e48:	42bb      	cmp	r3, r7
 8000e4a:	460d      	mov	r5, r1
 8000e4c:	d9f4      	bls.n	8000e38 <_printf_i+0x110>
 8000e4e:	2b08      	cmp	r3, #8
 8000e50:	d10b      	bne.n	8000e6a <_printf_i+0x142>
 8000e52:	6823      	ldr	r3, [r4, #0]
 8000e54:	07df      	lsls	r7, r3, #31
 8000e56:	d508      	bpl.n	8000e6a <_printf_i+0x142>
 8000e58:	6923      	ldr	r3, [r4, #16]
 8000e5a:	6861      	ldr	r1, [r4, #4]
 8000e5c:	4299      	cmp	r1, r3
 8000e5e:	bfde      	ittt	le
 8000e60:	2330      	movle	r3, #48	@ 0x30
 8000e62:	f806 3c01 	strble.w	r3, [r6, #-1]
 8000e66:	f106 36ff 	addle.w	r6, r6, #4294967295
 8000e6a:	1b92      	subs	r2, r2, r6
 8000e6c:	6122      	str	r2, [r4, #16]
 8000e6e:	f8cd a000 	str.w	sl, [sp]
 8000e72:	464b      	mov	r3, r9
 8000e74:	aa03      	add	r2, sp, #12
 8000e76:	4621      	mov	r1, r4
 8000e78:	4640      	mov	r0, r8
 8000e7a:	f7ff fee7 	bl	8000c4c <_printf_common>
 8000e7e:	3001      	adds	r0, #1
 8000e80:	d14a      	bne.n	8000f18 <_printf_i+0x1f0>
 8000e82:	f04f 30ff 	mov.w	r0, #4294967295
 8000e86:	b004      	add	sp, #16
 8000e88:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e8c:	6823      	ldr	r3, [r4, #0]
 8000e8e:	f043 0320 	orr.w	r3, r3, #32
 8000e92:	6023      	str	r3, [r4, #0]
 8000e94:	4832      	ldr	r0, [pc, #200]	@ (8000f60 <_printf_i+0x238>)
 8000e96:	2778      	movs	r7, #120	@ 0x78
 8000e98:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8000e9c:	6823      	ldr	r3, [r4, #0]
 8000e9e:	6831      	ldr	r1, [r6, #0]
 8000ea0:	061f      	lsls	r7, r3, #24
 8000ea2:	f851 5b04 	ldr.w	r5, [r1], #4
 8000ea6:	d402      	bmi.n	8000eae <_printf_i+0x186>
 8000ea8:	065f      	lsls	r7, r3, #25
 8000eaa:	bf48      	it	mi
 8000eac:	b2ad      	uxthmi	r5, r5
 8000eae:	6031      	str	r1, [r6, #0]
 8000eb0:	07d9      	lsls	r1, r3, #31
 8000eb2:	bf44      	itt	mi
 8000eb4:	f043 0320 	orrmi.w	r3, r3, #32
 8000eb8:	6023      	strmi	r3, [r4, #0]
 8000eba:	b11d      	cbz	r5, 8000ec4 <_printf_i+0x19c>
 8000ebc:	2310      	movs	r3, #16
 8000ebe:	e7ad      	b.n	8000e1c <_printf_i+0xf4>
 8000ec0:	4826      	ldr	r0, [pc, #152]	@ (8000f5c <_printf_i+0x234>)
 8000ec2:	e7e9      	b.n	8000e98 <_printf_i+0x170>
 8000ec4:	6823      	ldr	r3, [r4, #0]
 8000ec6:	f023 0320 	bic.w	r3, r3, #32
 8000eca:	6023      	str	r3, [r4, #0]
 8000ecc:	e7f6      	b.n	8000ebc <_printf_i+0x194>
 8000ece:	4616      	mov	r6, r2
 8000ed0:	e7bd      	b.n	8000e4e <_printf_i+0x126>
 8000ed2:	6833      	ldr	r3, [r6, #0]
 8000ed4:	6825      	ldr	r5, [r4, #0]
 8000ed6:	6961      	ldr	r1, [r4, #20]
 8000ed8:	1d18      	adds	r0, r3, #4
 8000eda:	6030      	str	r0, [r6, #0]
 8000edc:	062e      	lsls	r6, r5, #24
 8000ede:	681b      	ldr	r3, [r3, #0]
 8000ee0:	d501      	bpl.n	8000ee6 <_printf_i+0x1be>
 8000ee2:	6019      	str	r1, [r3, #0]
 8000ee4:	e002      	b.n	8000eec <_printf_i+0x1c4>
 8000ee6:	0668      	lsls	r0, r5, #25
 8000ee8:	d5fb      	bpl.n	8000ee2 <_printf_i+0x1ba>
 8000eea:	8019      	strh	r1, [r3, #0]
 8000eec:	2300      	movs	r3, #0
 8000eee:	6123      	str	r3, [r4, #16]
 8000ef0:	4616      	mov	r6, r2
 8000ef2:	e7bc      	b.n	8000e6e <_printf_i+0x146>
 8000ef4:	6833      	ldr	r3, [r6, #0]
 8000ef6:	1d1a      	adds	r2, r3, #4
 8000ef8:	6032      	str	r2, [r6, #0]
 8000efa:	681e      	ldr	r6, [r3, #0]
 8000efc:	6862      	ldr	r2, [r4, #4]
 8000efe:	2100      	movs	r1, #0
 8000f00:	4630      	mov	r0, r6
 8000f02:	f7ff f96d 	bl	80001e0 <memchr>
 8000f06:	b108      	cbz	r0, 8000f0c <_printf_i+0x1e4>
 8000f08:	1b80      	subs	r0, r0, r6
 8000f0a:	6060      	str	r0, [r4, #4]
 8000f0c:	6863      	ldr	r3, [r4, #4]
 8000f0e:	6123      	str	r3, [r4, #16]
 8000f10:	2300      	movs	r3, #0
 8000f12:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8000f16:	e7aa      	b.n	8000e6e <_printf_i+0x146>
 8000f18:	6923      	ldr	r3, [r4, #16]
 8000f1a:	4632      	mov	r2, r6
 8000f1c:	4649      	mov	r1, r9
 8000f1e:	4640      	mov	r0, r8
 8000f20:	47d0      	blx	sl
 8000f22:	3001      	adds	r0, #1
 8000f24:	d0ad      	beq.n	8000e82 <_printf_i+0x15a>
 8000f26:	6823      	ldr	r3, [r4, #0]
 8000f28:	079b      	lsls	r3, r3, #30
 8000f2a:	d413      	bmi.n	8000f54 <_printf_i+0x22c>
 8000f2c:	68e0      	ldr	r0, [r4, #12]
 8000f2e:	9b03      	ldr	r3, [sp, #12]
 8000f30:	4298      	cmp	r0, r3
 8000f32:	bfb8      	it	lt
 8000f34:	4618      	movlt	r0, r3
 8000f36:	e7a6      	b.n	8000e86 <_printf_i+0x15e>
 8000f38:	2301      	movs	r3, #1
 8000f3a:	4632      	mov	r2, r6
 8000f3c:	4649      	mov	r1, r9
 8000f3e:	4640      	mov	r0, r8
 8000f40:	47d0      	blx	sl
 8000f42:	3001      	adds	r0, #1
 8000f44:	d09d      	beq.n	8000e82 <_printf_i+0x15a>
 8000f46:	3501      	adds	r5, #1
 8000f48:	68e3      	ldr	r3, [r4, #12]
 8000f4a:	9903      	ldr	r1, [sp, #12]
 8000f4c:	1a5b      	subs	r3, r3, r1
 8000f4e:	42ab      	cmp	r3, r5
 8000f50:	dcf2      	bgt.n	8000f38 <_printf_i+0x210>
 8000f52:	e7eb      	b.n	8000f2c <_printf_i+0x204>
 8000f54:	2500      	movs	r5, #0
 8000f56:	f104 0619 	add.w	r6, r4, #25
 8000f5a:	e7f5      	b.n	8000f48 <_printf_i+0x220>
 8000f5c:	08001078 	.word	0x08001078
 8000f60:	08001089 	.word	0x08001089

08000f64 <memmove>:
 8000f64:	4288      	cmp	r0, r1
 8000f66:	b510      	push	{r4, lr}
 8000f68:	eb01 0402 	add.w	r4, r1, r2
 8000f6c:	d902      	bls.n	8000f74 <memmove+0x10>
 8000f6e:	4284      	cmp	r4, r0
 8000f70:	4623      	mov	r3, r4
 8000f72:	d807      	bhi.n	8000f84 <memmove+0x20>
 8000f74:	1e43      	subs	r3, r0, #1
 8000f76:	42a1      	cmp	r1, r4
 8000f78:	d008      	beq.n	8000f8c <memmove+0x28>
 8000f7a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8000f7e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8000f82:	e7f8      	b.n	8000f76 <memmove+0x12>
 8000f84:	4402      	add	r2, r0
 8000f86:	4601      	mov	r1, r0
 8000f88:	428a      	cmp	r2, r1
 8000f8a:	d100      	bne.n	8000f8e <memmove+0x2a>
 8000f8c:	bd10      	pop	{r4, pc}
 8000f8e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8000f92:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8000f96:	e7f7      	b.n	8000f88 <memmove+0x24>

08000f98 <_sbrk_r>:
 8000f98:	b538      	push	{r3, r4, r5, lr}
 8000f9a:	4d06      	ldr	r5, [pc, #24]	@ (8000fb4 <_sbrk_r+0x1c>)
 8000f9c:	2300      	movs	r3, #0
 8000f9e:	4604      	mov	r4, r0
 8000fa0:	4608      	mov	r0, r1
 8000fa2:	602b      	str	r3, [r5, #0]
 8000fa4:	f7ff fa6a 	bl	800047c <_sbrk>
 8000fa8:	1c43      	adds	r3, r0, #1
 8000faa:	d102      	bne.n	8000fb2 <_sbrk_r+0x1a>
 8000fac:	682b      	ldr	r3, [r5, #0]
 8000fae:	b103      	cbz	r3, 8000fb2 <_sbrk_r+0x1a>
 8000fb0:	6023      	str	r3, [r4, #0]
 8000fb2:	bd38      	pop	{r3, r4, r5, pc}
 8000fb4:	200001b0 	.word	0x200001b0

08000fb8 <memcpy>:
 8000fb8:	440a      	add	r2, r1
 8000fba:	4291      	cmp	r1, r2
 8000fbc:	f100 33ff 	add.w	r3, r0, #4294967295
 8000fc0:	d100      	bne.n	8000fc4 <memcpy+0xc>
 8000fc2:	4770      	bx	lr
 8000fc4:	b510      	push	{r4, lr}
 8000fc6:	f811 4b01 	ldrb.w	r4, [r1], #1
 8000fca:	f803 4f01 	strb.w	r4, [r3, #1]!
 8000fce:	4291      	cmp	r1, r2
 8000fd0:	d1f9      	bne.n	8000fc6 <memcpy+0xe>
 8000fd2:	bd10      	pop	{r4, pc}

08000fd4 <_realloc_r>:
 8000fd4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000fd8:	4607      	mov	r7, r0
 8000fda:	4614      	mov	r4, r2
 8000fdc:	460d      	mov	r5, r1
 8000fde:	b921      	cbnz	r1, 8000fea <_realloc_r+0x16>
 8000fe0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8000fe4:	4611      	mov	r1, r2
 8000fe6:	f7ff bc4d 	b.w	8000884 <_malloc_r>
 8000fea:	b92a      	cbnz	r2, 8000ff8 <_realloc_r+0x24>
 8000fec:	f7ff fbde 	bl	80007ac <_free_r>
 8000ff0:	4625      	mov	r5, r4
 8000ff2:	4628      	mov	r0, r5
 8000ff4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8000ff8:	f000 f81a 	bl	8001030 <_malloc_usable_size_r>
 8000ffc:	4284      	cmp	r4, r0
 8000ffe:	4606      	mov	r6, r0
 8001000:	d802      	bhi.n	8001008 <_realloc_r+0x34>
 8001002:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8001006:	d8f4      	bhi.n	8000ff2 <_realloc_r+0x1e>
 8001008:	4621      	mov	r1, r4
 800100a:	4638      	mov	r0, r7
 800100c:	f7ff fc3a 	bl	8000884 <_malloc_r>
 8001010:	4680      	mov	r8, r0
 8001012:	b908      	cbnz	r0, 8001018 <_realloc_r+0x44>
 8001014:	4645      	mov	r5, r8
 8001016:	e7ec      	b.n	8000ff2 <_realloc_r+0x1e>
 8001018:	42b4      	cmp	r4, r6
 800101a:	4622      	mov	r2, r4
 800101c:	4629      	mov	r1, r5
 800101e:	bf28      	it	cs
 8001020:	4632      	movcs	r2, r6
 8001022:	f7ff ffc9 	bl	8000fb8 <memcpy>
 8001026:	4629      	mov	r1, r5
 8001028:	4638      	mov	r0, r7
 800102a:	f7ff fbbf 	bl	80007ac <_free_r>
 800102e:	e7f1      	b.n	8001014 <_realloc_r+0x40>

08001030 <_malloc_usable_size_r>:
 8001030:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8001034:	1f18      	subs	r0, r3, #4
 8001036:	2b00      	cmp	r3, #0
 8001038:	bfbc      	itt	lt
 800103a:	580b      	ldrlt	r3, [r1, r0]
 800103c:	18c0      	addlt	r0, r0, r3
 800103e:	4770      	bx	lr

08001040 <_init>:
 8001040:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001042:	bf00      	nop
 8001044:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001046:	bc08      	pop	{r3}
 8001048:	469e      	mov	lr, r3
 800104a:	4770      	bx	lr

0800104c <_fini>:
 800104c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800104e:	bf00      	nop
 8001050:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001052:	bc08      	pop	{r3}
 8001054:	469e      	mov	lr, r3
 8001056:	4770      	bx	lr
